/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsNames200Ok :  IEquatable<GetCorporationsNames200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsNames200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsNames200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsNames200Ok" /> class.
        /// </summary>
        /// <param name="CorporationId">corporation_id integer (required).</param>
        /// <param name="CorporationName">corporation_name string (required).</param>
        public GetCorporationsNames200Ok(int? CorporationId = default(int?), string CorporationName = default(string))
        {
            // to ensure "CorporationId" is required (not null)
            if (CorporationId == null)
            {
                throw new InvalidDataException("CorporationId is a required property for GetCorporationsNames200Ok and cannot be null");
            }
            else
            {
                this.CorporationId = CorporationId;
            }
            // to ensure "CorporationName" is required (not null)
            if (CorporationName == null)
            {
                throw new InvalidDataException("CorporationName is a required property for GetCorporationsNames200Ok and cannot be null");
            }
            else
            {
                this.CorporationName = CorporationName;
            }
        }
        
        /// <summary>
        /// corporation_id integer
        /// </summary>
        /// <value>corporation_id integer</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }

        /// <summary>
        /// corporation_name string
        /// </summary>
        /// <value>corporation_name string</value>
        [DataMember(Name="corporation_name", EmitDefaultValue=false)]
        public string CorporationName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsNames200Ok {\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  CorporationName: ").Append(CorporationName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsNames200Ok);
        }

        /// <summary>
        /// Returns true if GetCorporationsNames200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsNames200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsNames200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorporationId == input.CorporationId ||
                    (this.CorporationId != null &&
                    this.CorporationId.Equals(input.CorporationId))
                ) && 
                (
                    this.CorporationName == input.CorporationName ||
                    (this.CorporationName != null &&
                    this.CorporationName.Equals(input.CorporationName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorporationId != null)
                    hashCode = hashCode * 59 + this.CorporationId.GetHashCode();
                if (this.CorporationName != null)
                    hashCode = hashCode * 59 + this.CorporationName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
